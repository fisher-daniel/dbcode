-- -----------------------------------------------------------------------------------
-- File Name    : https://github.com/fisher-daniel/dbcode/edit/master/p_encrypt
-- Author       : Dan Fisher
-- Description  : get columns to be encrypted from ref table and then encrypt
-- Requirements : update and select privileges
-- Call Syntax  : call p_encrypt;
-- Last Modified: 13/05/2015
-- -----------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE  `p_encrypt` ()
BEGIN

-- create variable for not found handler
DECLARE v_finished INTEGER DEFAULT 0;

-- declare variables for the, db, table and col names strings
DECLARE v_db varchar(100) DEFAULT "";
DECLARE v_tab varchar(100) DEFAULT "";
DECLARE v_col varchar(100) DEFAULT "";

-- create the cursor based on the encryption table values & form cols to be encrypted
DECLARE col_cur CURSOR FOR 
select database_name, table_name, column_name  from t_columns_encrypt;
 
 -- declare NOT FOUND handler
 DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET v_finished = 1;

-- open the cursor based on db, table and col
OPEN col_cur;

-- for all records in the cursor,  loop
get_col: LOOP

-- fetch the cursor record value into db, table and column variable
 FETCH col_cur INTO v_db, v_tab, v_col;
 IF v_finished = 1 THEN 
 LEAVE get_col;
 END IF;

 -- build up dynamic sql statement by setting @variable for the db, table and column
SET @db_name:= v_db;
SET @table_name:= v_tab;
SET @column_name:= v_col;

-- concate strings together to a single update 
SET @sql:=CONCAT('update ', @db_name, '.', @table_name, ' set ', @column_name, ' := ENCRYPT(',@column_name, ');');

-- prepare and execute the dynamic sql 
PREPARE dynamic_statement FROM @sql;
EXECUTE dynamic_statement;

-- tidy up 
DEALLOCATE PREPARE dynamic_statement;

-- close loop
END LOOP get_col;

END $$

DELIMITER ;

drop procedure p_encrypt;
call p_encrypt;
